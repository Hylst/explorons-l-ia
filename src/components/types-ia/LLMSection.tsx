
import React from 'react';
import { MessageSquare, Cpu, Braces, Sparkles, ArrowRight, HelpCircle } from 'lucide-react';
import IASection from './IASection';
import { motion } from 'framer-motion';
import { Button } from "@/components/ui/button";
import { Link } from 'react-router-dom';
import { 
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

const LLMSection = () => {
  const TooltipTerm: React.FC<{ 
    title: string; 
    content: string; 
    example?: string; 
    children: React.ReactNode 
  }> = ({ title, content, example, children }) => (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <span className="relative cursor-help border-b border-dotted border-primary/50 hover:border-primary transition-colors">
            {children}
            <HelpCircle className="inline w-3 h-3 ml-1 text-primary/60 hover:text-primary transition-colors" />
          </span>
        </TooltipTrigger>
        <TooltipContent className="max-w-sm p-4 bg-card border shadow-lg">
          <div className="space-y-2">
            <h4 className="font-semibold text-sm text-primary">{title}</h4>
            <p className="text-sm text-muted-foreground">{content}</p>
            {example && (
              <div className="mt-2 p-2 bg-secondary/50 rounded text-xs">
                <span className="font-medium">üí° {example}</span>
              </div>
            )}
          </div>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );

  const detailsCard = (
    <>
      <motion.h4 
        className="text-lg font-semibold mb-4 hover:text-primary transition-colors"
        whileHover={{ scale: 1.02 }}
      >
        Fonctionnement technique
      </motion.h4>
      <motion.p 
        className="mb-4 leading-relaxed hover:text-foreground transition-colors"
        whileHover={{ x: 2 }}
      >
        Les LLM utilisent des architectures bas√©es sur les{' '}
        <TooltipTerm 
          title="Architecture Transformers"
          content="Une r√©volution en IA qui permet de traiter tout le texte en parall√®le au lieu de mot par mot."
          example="Comme lire une phrase enti√®re d'un coup au lieu de lettre par lettre"
        >
          transformers
        </TooltipTerm>
        {' '}avec des m√©canismes d'{' '}
        <TooltipTerm 
          title="M√©canisme d'attention"
          content="Permet √† l'IA de se concentrer sur les mots les plus importants dans un texte."
          example="Comme surligner automatiquement les mots-cl√©s dans un texte"
        >
          attention
        </TooltipTerm>
        {' '}pour traiter le texte. Ils sont entra√Æn√©s en deux phases :
      </motion.p>
      
      <motion.ol 
        className="space-y-3 ml-6 list-decimal text-muted-foreground mb-8"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ staggerChildren: 0.1 }}
      >
        <motion.li
          className="hover:text-foreground transition-colors p-2 rounded hover:bg-secondary/20"
          whileHover={{ x: 4 }}
        >
          <span className="font-medium text-foreground">
            <TooltipTerm 
              title="Pr√©-entra√Ænement"
              content="Phase o√π l'IA lit des milliards de textes pour apprendre les r√®gles du langage."
              example="Comme un enfant qui apprendrait √† parler en √©coutant toutes les conversations du monde"
            >
              Pr√©-entra√Ænement
            </TooltipTerm>
            :
          </span> Le mod√®le apprend les structures du langage sur d'√©normes corpus de texte.
        </motion.li>
        <motion.li
          className="hover:text-foreground transition-colors p-2 rounded hover:bg-secondary/20"
          whileHover={{ x: 4 }}
        >
          <span className="font-medium text-foreground">
            <TooltipTerm 
              title="Fine-tuning"
              content="Personnalisation du mod√®le pour des t√¢ches sp√©cifiques avec des exemples cibl√©s."
              example="Comme sp√©cialiser un √©tudiant brillant pour devenir m√©decin ou avocat"
            >
              Fine-tuning
            </TooltipTerm>
            :
          </span> Le mod√®le est affin√© sur des t√¢ches sp√©cifiques avec des donn√©es annot√©es.
        </motion.li>
      </motion.ol>
      
      <motion.div 
        className="mt-8 p-5 rounded-xl bg-secondary/30 border hover:border-primary/20 hover:bg-secondary/40 transition-all duration-300"
        whileHover={{ scale: 1.01, y: -2 }}
      >
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <motion.h5 
                className="font-medium mb-3 flex items-center gap-2 cursor-help hover:text-primary transition-colors"
                whileHover={{ scale: 1.02 }}
              >
                <Cpu className="h-4 w-4 text-primary" /> Architecture des LLM
                <HelpCircle className="w-4 h-4 text-primary/60 hover:text-primary transition-colors" />
              </motion.h5>
            </TooltipTrigger>
            <TooltipContent>
              <p>Sch√©ma simplifi√© du fonctionnement interne d'un mod√®le de langage</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        
        <motion.div 
          className="mb-4 aspect-[4/3] bg-secondary/20 rounded-lg p-3 flex items-center justify-center hover:bg-secondary/30 transition-colors"
          whileHover={{ scale: 1.02 }}
        >
          <svg viewBox="0 0 500 300" className="w-full h-full">
            {/* Input Text */}
            <motion.rect 
              x="50" y="50" width="400" height="30" rx="5" 
              fill="rgb(var(--primary))" fillOpacity="0.1" 
              stroke="rgb(var(--primary))" strokeWidth="1"
              whileHover={{ fillOpacity: 0.2 }}
            />
            <text x="250" y="70" textAnchor="middle" fill="currentColor" fontSize="14">Texte d'entr√©e</text>
            
            {/* Embedding */}
            <motion.rect 
              x="50" y="100" width="400" height="30" rx="5" 
              fill="rgb(var(--primary))" fillOpacity="0.2" 
              stroke="rgb(var(--primary))" strokeWidth="1"
              whileHover={{ fillOpacity: 0.3 }}
            />
            <text x="250" y="120" textAnchor="middle" fill="currentColor" fontSize="14">Embedding</text>
            
            {/* Attention blocks */}
            <motion.rect 
              x="50" y="150" width="400" height="80" rx="5" 
              fill="rgb(var(--primary))" fillOpacity="0.3" 
              stroke="rgb(var(--primary))" strokeWidth="1"
              whileHover={{ fillOpacity: 0.4 }}
            />
            <text x="250" y="180" textAnchor="middle" fill="currentColor" fontSize="14">Couches d'attention</text>
            <text x="250" y="200" textAnchor="middle" fill="currentColor" fontSize="12">(Plusieurs blocs empil√©s)</text>
            
            {/* Output Text */}
            <motion.rect 
              x="50" y="250" width="400" height="30" rx="5" 
              fill="rgb(var(--primary))" fillOpacity="0.2" 
              stroke="rgb(var(--primary))" strokeWidth="1"
              whileHover={{ fillOpacity: 0.3 }}
            />
            <text x="250" y="270" textAnchor="middle" fill="currentColor" fontSize="14">G√©n√©ration de texte</text>
            
            {/* Connecting lines */}
            <motion.line 
              x1="250" y1="80" x2="250" y2="100" 
              stroke="rgb(var(--primary))" strokeWidth="2"
              initial={{ pathLength: 0 }}
              animate={{ pathLength: 1 }}
              transition={{ duration: 2, repeat: Infinity }}
            />
            <motion.line 
              x1="250" y1="130" x2="250" y2="150" 
              stroke="rgb(var(--primary))" strokeWidth="2"
              initial={{ pathLength: 0 }}
              animate={{ pathLength: 1 }}
              transition={{ duration: 2, delay: 0.5, repeat: Infinity }}
            />
            <motion.line 
              x1="250" y1="230" x2="250" y2="250" 
              stroke="rgb(var(--primary))" strokeWidth="2"
              initial={{ pathLength: 0 }}
              animate={{ pathLength: 1 }}
              transition={{ duration: 2, delay: 1, repeat: Infinity }}
            />
          </svg>
        </motion.div>
      </motion.div>
      
      <motion.div 
        className="mt-6 p-4 rounded-lg bg-secondary/40 hover:bg-secondary/50 transition-colors"
        whileHover={{ scale: 1.01 }}
      >
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <motion.h5 
                className="font-medium mb-2 flex items-center gap-2 cursor-help hover:text-primary transition-colors"
                whileHover={{ scale: 1.02 }}
              >
                <Braces className="h-4 w-4 text-primary" /> Exemples d'usage
                <HelpCircle className="w-4 h-4 text-primary/60 hover:text-primary transition-colors" />
              </motion.h5>
            </TooltipTrigger>
            <TooltipContent>
              <p>Applications concr√®tes des mod√®les de langage dans diff√©rents domaines</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
          {[
            { title: "G√©n√©ration de contenu", desc: "Cr√©ation d'articles, r√©sum√©s, traductions, storytelling" },
            { title: "Assistants conversationnels", desc: "Chatbots, service client, assistants personnels" },
            { title: "Analyse et compr√©hension", desc: "Extraction d'informations, sentiment, classification" },
            { title: "Codage assist√©", desc: "Compl√©tion, debugging, documentation de code" }
          ].map((item, index) => (
            <motion.div 
              key={index}
              className="p-2 border border-border rounded-lg bg-secondary/20 hover:bg-secondary/30 hover:border-primary/20 transition-all duration-200"
              whileHover={{ scale: 1.02, y: -2 }}
              whileTap={{ scale: 0.98 }}
            >
              <p className="text-sm font-medium hover:text-primary transition-colors">{item.title}</p>
              <p className="text-xs text-muted-foreground">{item.desc}</p>
            </motion.div>
          ))}
        </div>
      </motion.div>
      
      <motion.div 
        className="mt-6 p-4 rounded-lg bg-secondary/40 hover:bg-secondary/50 transition-colors"
        whileHover={{ scale: 1.01 }}
      >
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <motion.h5 
                className="font-medium mb-2 flex items-center gap-2 cursor-help hover:text-primary transition-colors"
                whileHover={{ scale: 1.02 }}
              >
                <Sparkles className="h-4 w-4 text-primary" /> Avanc√©es r√©centes
                <HelpCircle className="w-4 h-4 text-primary/60 hover:text-primary transition-colors" />
              </motion.h5>
            </TooltipTrigger>
            <TooltipContent className="max-w-sm">
              <div className="space-y-2">
                <p className="font-semibold">Innovations 2023-2024</p>
                <p className="text-sm">Les derni√®res perc√©es qui rendent les LLM plus fiables et utiles.</p>
              </div>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        
        <motion.p 
          className="text-sm text-muted-foreground hover:text-foreground transition-colors"
          whileHover={{ x: 2 }}
        >
          L'√©mergence de techniques comme{' '}
          <TooltipTerm 
            title="RLHF - Apprentissage par Renforcement avec Feedback Humain"
            content="M√©thode pour enseigner aux IA les pr√©f√©rences humaines en leur donnant des notes sur leurs r√©ponses."
            example="Comme avoir des professeurs qui corrigent et notent les copies d'un √©tudiant pour l'am√©liorer"
          >
            RLHF
          </TooltipTerm>
          {' '}a consid√©rablement am√©lior√© l'alignement des LLM avec les attentes humaines, 
          r√©duisant les sorties probl√©matiques et am√©liorant l'utilit√© des r√©ponses.
        </motion.p>
        
        <motion.p 
          className="text-sm text-muted-foreground mt-2 hover:text-foreground transition-colors"
          whileHover={{ x: 2 }}
        >
          Les mod√®les les plus r√©cents d√©montrent des{' '}
          <TooltipTerm 
            title="Capacit√©s √©mergentes"
            content="Comp√©tences surprenantes qui apparaissent spontan√©ment quand les mod√®les deviennent tr√®s grands."
            example="Comme un enfant qui apprend soudainement √† faire du v√©lo sans qu'on lui enseigne explicitement"
          >
            capacit√©s √©mergentes
          </TooltipTerm>
          {' '}: raisonnement complexe, r√©solution de probl√®mes et m√™me une forme de "th√©orie de l'esprit".
        </motion.p>
        
        <motion.div 
          className="mt-4 flex justify-end"
          whileHover={{ scale: 1.05 }}
        >
          <Link to="/types-ia/llm">
            <Button 
              size="sm" 
              variant="outline" 
              className="text-xs flex items-center gap-1 hover:bg-primary hover:text-primary-foreground transition-all duration-300 hover:shadow-lg"
            >
              <span>Approfondir le sujet</span>
              <motion.div
                whileHover={{ x: 2 }}
                transition={{ type: "spring", stiffness: 400, damping: 10 }}
              >
                <ArrowRight className="h-3 w-3" />
              </motion.div>
            </Button>
          </Link>
        </motion.div>
      </motion.div>
    </>
  );

  return (
    <IASection
      sectionId="llm-section"
      icon={<MessageSquare size={32} className="text-primary" />}
      title="Mod√®les de Langage (LLM)"
      description="Les Large Language Models (LLM) sont des mod√®les d'IA entra√Æn√©s sur d'immenses corpus de texte 
      pour comprendre et g√©n√©rer du langage humain de mani√®re coh√©rente et contextuelle. Ils repr√©sentent l'√©tat de l'art 
      en traitement automatique du langage naturel."
      benefits={[
        "Capable de g√©n√©rer du texte, traduire, r√©sumer et r√©pondre √† des questions complexes",
        "Utilis√©s dans les chatbots, assistants virtuels, outils de cr√©ation de contenu et applications d'analyse textuelle",
        "Int√©gration facilit√©e via des API permettant l'acc√®s √† des mod√®les comme GPT-4, Claude, LLaMA, Mistral",
        "√âvolution constante vers une meilleure compr√©hension du contexte et des intentions"
      ]}
      detailsCard={detailsCard}
      delay={0}
    />
  );
};

export default LLMSection;
