
import React from 'react';
import Hero from '@/components/Hero';
import SectionHeading from '@/components/SectionHeading';
import { Card, CardContent } from '@/components/ui/card';
import { Brain, BookOpen, ChevronRight, BarChart, Network, Layers, Code, Zap, Target, Lightbulb } from 'lucide-react';
import LessonSection from '@/components/courses/LessonSection';
import CodeExample from '@/components/courses/CodeExample';
import ZoomOn from '@/components/courses/ZoomOn';
import Illustration from '@/components/courses/Illustration';
import CourseQuiz, { QuizQuestion } from '@/components/courses/CourseQuiz';
import BackToResourcesButton from '@/components/courses/BackToResourcesButton';
import DidYouKnow from '@/components/courses/DidYouKnow';
import AnalogyBox from '@/components/courses/AnalogyBox';
import TechnicalTooltip from '@/components/courses/TechnicalTooltip';
import StatsGrid from '@/components/courses/StatsGrid';
import CourseHeader from '@/components/courses/CourseHeader';
import CourseModule from '@/components/courses/CourseModule';
import CourseConclusion from '@/components/courses/CourseConclusion';

/**
 * Page du cours sur le Deep Learning pratique
 * @returns {JSX.Element} Le composant de la page
 */
const DeepLearning = () => {
  const quizQuestions: QuizQuestion[] = [
    {
      question: "Quelle est la principale diff√©rence entre TensorFlow et PyTorch?",
      options: [
        "TensorFlow est uniquement pour le deep learning, PyTorch pour le machine learning classique",
        "TensorFlow utilise le graphe statique par d√©faut, PyTorch utilise une approche de graphe dynamique",
        "TensorFlow est open source, PyTorch est propri√©taire",
        "TensorFlow ne peut pas √™tre utilis√© pour la vision par ordinateur"
      ],
      correctAnswer: 1,
      explanation: "TensorFlow utilise traditionnellement un graphe statique (bien que TF 2.x ait ajout√© un mode eager), tandis que PyTorch utilise une approche de graphe dynamique qui permet un d√©bogage plus facile et une flexibilit√© dans la construction des mod√®les."
    },
    {
      question: "Quel est le r√¥le des fonctions d'activation dans un r√©seau de neurones?",
      options: [
        "Elles d√©terminent la vitesse d'apprentissage du mod√®le",
        "Elles introduisent des non-lin√©arit√©s dans le mod√®le",
        "Elles servent uniquement √† normaliser les donn√©es",
        "Elles contr√¥lent le nombre de couches du r√©seau"
      ],
      correctAnswer: 1,
      explanation: "Les fonctions d'activation introduisent des non-lin√©arit√©s dans le mod√®le, permettant au r√©seau d'apprendre des relations complexes et non lin√©aires dans les donn√©es."
    },
    {
      question: "Qu'est-ce que le probl√®me de disparition du gradient (vanishing gradient) dans les r√©seaux de neurones profonds?",
      options: [
        "Les gradients deviennent trop grands et causent une explosion de l'apprentissage",
        "Les gradients deviennent tr√®s petits et l'apprentissage ralentit ou s'arr√™te",
        "Les couches cach√©es disparaissent pendant l'entra√Ænement",
        "Le r√©seau ne peut pas apprendre de motifs locaux"
      ],
      correctAnswer: 1,
      explanation: "Le probl√®me de disparition du gradient survient lorsque les gradients deviennent extr√™mement petits lors de la r√©tropropagation, ce qui rend l'apprentissage tr√®s lent ou impossible dans les couches profondes du r√©seau."
    },
    {
      question: "Quelle architecture est sp√©cifiquement con√ßue pour la vision par ordinateur?",
      options: [
        "RNN (Recurrent Neural Network)",
        "Transformer",
        "CNN (Convolutional Neural Network)",
        "AE (Autoencoder)"
      ],
      correctAnswer: 2,
      explanation: "Les r√©seaux de neurones convolutifs (CNN) sont sp√©cialement con√ßus pour traiter des donn√©es avec une topologie en grille comme les images, gr√¢ce √† leurs op√©rations de convolution qui captent les motifs locaux et la hi√©rarchie de caract√©ristiques."
    },
    {
      question: "Qu'est-ce que le transfert learning (apprentissage par transfert)?",
      options: [
        "Transf√©rer un mod√®le d'un framework √† un autre (TensorFlow √† PyTorch)",
        "Utiliser un mod√®le pr√©entra√Æn√© et le r√©ajuster sur une nouvelle t√¢che",
        "Transf√©rer l'apprentissage d'un utilisateur √† un autre",
        "L'apprentissage de plusieurs t√¢ches simultan√©ment"
      ],
      correctAnswer: 1,
      explanation: "L'apprentissage par transfert est une technique o√π un mod√®le d√©velopp√© pour une t√¢che est r√©utilis√© comme point de d√©part pour un mod√®le sur une seconde t√¢che, permettant d'exploiter les connaissances acquises pr√©c√©demment."
    }
  ];

  const didYouKnowItems = [
    {
      title: "Inspiration biologique",
      content: "Les r√©seaux de neurones artificiels s'inspirent du fonctionnement du cerveau humain, mais de mani√®re tr√®s simplifi√©e. Un neurone biologique a environ 7000 connexions synaptiques en moyenne."
    },
    {
      title: "Puissance de calcul",
      content: "L'entra√Ænement de GPT-3 a n√©cessit√© environ 314 zettajoules d'√©nergie, √©quivalent √† la consommation √©lectrique de 126 foyers danois pendant un an."
    },
    {
      title: "Donn√©es d'entra√Ænement",
      content: "ImageNet, l'un des datasets les plus influents en vision par ordinateur, contient plus de 14 millions d'images √©tiquet√©es dans plus de 20 000 cat√©gories."
    }
  ];

  const statsData = [
    {
      value: "175B",
      description: "Param√®tres dans GPT-3",
      bgGradient: "from-blue-50 to-blue-100 dark:from-blue-950/50 dark:to-blue-900/50"
    },
    {
      value: "99.9%",
      description: "Pr√©cision en reconnaissance faciale",
      bgGradient: "from-green-50 to-green-100 dark:from-green-950/50 dark:to-green-900/50"
    },
    {
      value: "2012",
      description: "R√©volution AlexNet en vision",
      bgGradient: "from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/50"
    }
  ];

  const learningModules = [
    {
      icon: <Brain className="h-6 w-6" />,
      title: "Fondamentaux th√©oriques",
      items: [
        "Neurones artificiels et perceptrons",
        "Fonctions d'activation et leurs propri√©t√©s",
        "R√©tropropagation et optimisation",
        "R√©gularisation et g√©n√©ralisation"
      ]
    },
    {
      icon: <Code className="h-6 w-6" />,
      title: "Impl√©mentation pratique",
      items: [
        "TensorFlow et Keras en pratique",
        "PyTorch pour la recherche",
        "Pr√©paration et augmentation des donn√©es",
        "D√©bogage et optimisation des mod√®les"
      ]
    },
    {
      icon: <Target className="h-6 w-6" />,
      title: "Applications concr√®tes",
      items: [
        "Classification d'images m√©dicales",
        "D√©tection d'objets en temps r√©el",
        "G√©n√©ration de texte cr√©atif",
        "Pr√©diction de s√©ries temporelles"
      ]
    }
  ];

  return (
    <>
      <BackToResourcesButton />
      
      <Hero
        title="Deep Learning Pratique : De la Th√©orie √† l'Application"
        subtitle="Ma√Ætrisez l'art des r√©seaux de neurones profonds √† travers une approche progressive et pratique, de la th√©orie fondamentale aux applications industrielles"
      />

      <section className="section-container mb-10">
        <CourseHeader
          title="Deep Learning Pratique"
          subtitle="Un voyage complet dans l'univers des r√©seaux de neurones profonds"
          author="Dr. Geoffroy Streit"
          authorDescription="Consultant passionn√© en Intelligence Artificielle"
          duration="10-12 semaines (6-8h/semaine)"
          level="Interm√©diaire √† Avanc√©"
          audience="D√©veloppeurs, Data Scientists, Ing√©nieurs IA"
          tags={["Deep Learning", "TensorFlow", "PyTorch", "Pratique", "Projets"]}
        />

        <div className="max-w-4xl mx-auto mb-12">
          <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/30 dark:to-purple-950/30 rounded-xl p-8 mb-8">
            <h3 className="text-2xl font-bold mb-4 text-primary">üöÄ Bienvenue dans l'aventure du Deep Learning !</h3>
            <p className="text-lg mb-4 text-foreground">
              Imaginez pouvoir cr√©er des syst√®mes qui reconnaissent des visages dans une foule, qui comprennent le langage humain, 
              ou qui g√©n√®rent des ≈ìuvres d'art originales. C'est exactement ce que vous allez apprendre dans ce cours !
            </p>
            <p className="mb-4 text-foreground">
              Le Deep Learning n'est plus de la science-fiction. Aujourd'hui, il r√©volutionne la m√©decine avec des diagnostics 
              plus pr√©cis, transforme l'industrie automobile avec les voitures autonomes, et change notre fa√ßon de communiquer 
              avec les assistants vocaux intelligents.
            </p>
            <p className="font-medium text-primary">
              Ce cours vous guide pas √† pas, de la compr√©hension des concepts fondamentaux jusqu'√† la cr√©ation de vos propres 
              mod√®les pr√™ts pour la production. Pr√©parez-vous √† transformer votre carri√®re !
            </p>
          </div>

          <AnalogyBox
            title="Le Deep Learning, c'est comme apprendre √† conduire"
            content="Au d√©but, vous devez consciemment penser √† chaque action : v√©rifier les r√©troviseurs, actionner le clignotant, √©valuer les distances. Avec la pratique, ces actions deviennent automatiques. De m√™me, un r√©seau de neurones 'apprend' en ajustant progressivement ses connexions jusqu'√† reconna√Ætre automatiquement des motifs complexes dans les donn√©es."
            variant="info"
          />
        </div>

        <DidYouKnow items={didYouKnowItems} />

        <StatsGrid stats={statsData} />

        <CourseModule
          title="Programme du cours"
          description="Un parcours structur√© en 7 modules, chacun construisant sur les connaissances pr√©c√©dentes"
          modules={learningModules}
        />

        <div className="max-w-4xl mx-auto">
          {/* Module 1: Introduction et Fondamentaux */}
          <LessonSection title="Module 1 : Introduction et Fondamentaux du Deep Learning" icon={<Brain size={24} />} delay={1}>
            <p className="text-lg mb-4">
              Bienvenue dans le monde fascinant du Deep Learning ! Avant de plonger dans le code, prenons le temps de comprendre 
              ce qui rend cette technologie si r√©volutionnaire.
            </p>
            
            <ZoomOn title="Qu'est-ce qui rend le Deep Learning si sp√©cial ?">
              <p className="mb-3">
                Contrairement aux approches traditionnelles de programmation o√π nous √©crivons des r√®gles explicites, 
                le Deep Learning permet aux machines d'apprendre ces r√®gles automatiquement √† partir d'exemples.
              </p>
              <ul className="list-disc pl-6 space-y-2">
                <li><strong>Apprentissage automatique des caract√©ristiques :</strong> Plus besoin d'extraire manuellement les features importantes</li>
                <li><strong>Capacit√© de g√©n√©ralisation :</strong> Un mod√®le bien entra√Æn√© peut traiter des donn√©es qu'il n'a jamais vues</li>
                <li><strong>√âvolutivit√© :</strong> Plus de donn√©es = de meilleures performances (contrairement aux algorithmes classiques)</li>
              </ul>
            </ZoomOn>

            <Illustration 
              src="https://images.unsplash.com/photo-1507146153580-69a1fe6d8aa1?ixlib=rb-4.0.3&auto=format&fit=crop&w=1500&q=80" 
              alt="R√©seau de neurones connect√©s, repr√©sentation visuelle du deep learning"
              caption="Le Deep Learning s'inspire du fonctionnement du cerveau humain avec des couches de neurones interconnect√©s"
              width="2/3"
            />

            <h4 className="text-xl font-semibold mt-6 mb-3">Le neurone artificiel : brique de base</h4>
            <p className="mb-4">
              Tout commence par un <TechnicalTooltip term="Neurone artificiel" definition="Unit√© de calcul √©l√©mentaire qui re√ßoit des entr√©es, les pond√®re, et produit une sortie via une fonction d'activation">neurone artificiel</TechnicalTooltip>, 
              une version simplifi√©e d'un neurone biologique.
            </p>

            <CodeExample 
              title="Impl√©mentation d'un neurone simple"
              language="python"
              code={`import numpy as np
import matplotlib.pyplot as plt

class Neurone:
    def __init__(self, nb_entrees):
        # Initialisation al√©atoire des poids (distribution normale)
        self.poids = np.random.normal(0, 0.1, nb_entrees)
        self.biais = np.random.normal(0, 0.1)
        
    def sigmoid(self, x):
        """Fonction d'activation sigmoid : sortie entre 0 et 1"""
        return 1 / (1 + np.exp(-np.clip(x, -500, 500)))  # clip pour √©viter overflow
    
    def relu(self, x):
        """Fonction d'activation ReLU : max(0, x)"""
        return np.maximum(0, x)
    
    def forward(self, entrees, activation='sigmoid'):
        """Propagation avant : calcul de la sortie"""
        # √âtape 1: Somme pond√©r√©e
        somme_ponderee = np.dot(entrees, self.poids) + self.biais
        
        # √âtape 2: Application de la fonction d'activation
        if activation == 'sigmoid':
            sortie = self.sigmoid(somme_ponderee)
        elif activation == 'relu':
            sortie = self.relu(somme_ponderee)
        else:
            raise ValueError("Activation non support√©e")
            
        return sortie`}
              explanation="Ce code illustre le fonctionnement d'un neurone artificiel avec deux fonctions d'activation populaires. Remarquez comment les poids et le biais influencent la d√©cision finale."
            />

            <AnalogyBox
              title="Analogie : Le neurone comme un portier de bo√Æte de nuit"
              content="Imaginez un portier qui doit d√©cider qui peut entrer. Il regarde plusieurs crit√®res (√¢ge, tenue, etc.), donne un poids √† chacun selon leur importance, fait la somme, et si le total d√©passe son seuil, il laisse entrer la personne. C'est exactement ce que fait un neurone artificiel !"
            />
          </LessonSection>

          {/* Module 2: Architectures de r√©seaux */}
          <LessonSection title="Module 2 : Architectures et Propagation" icon={<Network size={24} />} delay={2}>
            <p className="text-lg mb-4">
              Maintenant que vous comprenez le neurone individuel, d√©couvrons comment les assembler pour cr√©er des 
              <TechnicalTooltip term="R√©seau de neurones multicouches" definition="Architecture compos√©e de plusieurs couches de neurones o√π chaque couche re√ßoit les sorties de la couche pr√©c√©dente">r√©seaux de neurones multicouches</TechnicalTooltip> 
              capables de r√©soudre des probl√®mes complexes.
            </p>

            <ZoomOn title="L'architecture feedforward : le mod√®le de base">
              <p className="mb-3">
                Dans un r√©seau feedforward, l'information circule dans une seule direction, de l'entr√©e vers la sortie :
              </p>
              <ol className="list-decimal pl-6 space-y-2">
                <li><strong>Couche d'entr√©e :</strong> Re√ßoit les donn√©es brutes (pixels d'image, mots, etc.)</li>
                <li><strong>Couches cach√©es :</strong> Extraient progressivement des caract√©ristiques de plus en plus abstraites</li>
                <li><strong>Couche de sortie :</strong> Produit la pr√©diction finale</li>
              </ol>
            </ZoomOn>

            <CodeExample 
              title="R√©seau de neurones complet avec TensorFlow"
              language="python"
              code={`import tensorflow as tf
from tensorflow import keras
import numpy as np

# Configuration simple d'un r√©seau dense
def creer_modele_simple(input_dim, output_dim):
    model = keras.Sequential([
        keras.layers.Dense(128, activation='relu', input_shape=(input_dim,)),
        keras.layers.Dropout(0.2),  # R√©gularisation
        keras.layers.Dense(64, activation='relu'),
        keras.layers.Dropout(0.2),
        keras.layers.Dense(output_dim, activation='softmax')
    ])
    
    model.compile(
        optimizer='adam',
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )
    
    return model

# Exemple d'utilisation
model = creer_modele_simple(784, 10)  # MNIST: 28x28 pixels -> 10 classes
model.summary()`}
              explanation="Cette impl√©mentation montre comment cr√©er un r√©seau simple avec TensorFlow/Keras. Notez l'utilisation du dropout pour √©viter le surapprentissage."
            />

            <AnalogyBox
              title="La r√©tropropagation : apprendre de ses erreurs"
              content="Imaginez un chef cuisiner qui go√ªte son plat et r√©alise qu'il est trop sal√©. Il va 'remonter' sa recette : peut-√™tre a-t-il mis trop de sel √† l'√©tape 3, ou utilis√© un bouillon trop sal√© √† l'√©tape 1. La r√©tropropagation fonctionne de m√™me : elle part de l'erreur finale et remonte pour identifier quels 'ingr√©dients' (poids) ajuster."
              variant="tip"
            />
          </LessonSection>

          {/* Module 3: Applications pratiques */}
          <LessonSection title="Module 3 : Applications Concr√®tes" icon={<Target size={24} />} delay={3}>
            <p className="text-lg mb-4">
              Passons maintenant aux applications concr√®tes ! Nous allons voir comment appliquer le Deep Learning 
              √† des probl√®mes r√©els avec des exemples pratiques.
            </p>

            <ZoomOn title="Classification d'images avec CNN">
              <p className="mb-3">
                Les r√©seaux de neurones convolutifs (CNN) sont particuli√®rement efficaces pour l'analyse d'images 
                car ils exploitent la structure spatiale des donn√©es.
              </p>
              <ul className="list-disc pl-6 space-y-2">
                <li><strong>Convolution :</strong> D√©tecte les motifs locaux (contours, textures)</li>
                <li><strong>Pooling :</strong> R√©duit la dimensionnalit√© tout en gardant l'information importante</li>
                <li><strong>Couches denses :</strong> Combine les caract√©ristiques pour la classification finale</li>
              </ul>
            </ZoomOn>

            <CodeExample 
              title="CNN pour classification d'images"
              language="python"
              code={`import tensorflow as tf
from tensorflow.keras import layers

def creer_cnn(input_shape, num_classes):
    model = tf.keras.Sequential([
        # Premier bloc convolutionnel
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        
        # Deuxi√®me bloc
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        
        # Troisi√®me bloc
        layers.Conv2D(128, (3, 3), activation='relu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        
        # Classification
        layers.GlobalAveragePooling2D(),
        layers.Dropout(0.5),
        layers.Dense(num_classes, activation='softmax')
    ])
    
    return model

# Exemple pour CIFAR-10
model = creer_cnn((32, 32, 3), 10)
model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)`}
              explanation="Ce CNN utilise des techniques modernes comme la BatchNormalization et le GlobalAveragePooling pour am√©liorer les performances et r√©duire le surapprentissage."
            />
          </LessonSection>

          {/* Quiz */}
          <div className="mt-16">
            <CourseQuiz 
              questions={quizQuestions}
              title="Quiz : Testez vos connaissances"
            />
          </div>

          {/* Conclusion */}
          <div className="mt-16">
            <CourseConclusion
              title="F√©licitations ! Vous ma√Ætrisez maintenant les fondamentaux du Deep Learning"
              description="Vous avez accompli un parcours remarquable dans l'apprentissage du Deep Learning. Voici ce que vous avez acquis et les prochaines √©tapes pour continuer votre progression."
              learningPoints={[
                "Compr√©hension des r√©seaux de neurones et de leur fonctionnement",
                "Ma√Ætrise des architectures CNN pour la vision par ordinateur", 
                "Connaissance des bonnes pratiques d'entra√Ænement",
                "Capacit√© √† impl√©menter des mod√®les avec TensorFlow/Keras"
              ]}
              nextSteps={[
                "Explorez les architectures avanc√©es comme les Transformers",
                "Cr√©ez votre propre projet de classification d'images",
                "Rejoignez des communaut√©s de Deep Learning pour √©changer"
              ]}
            />
          </div>
        </div>
      </section>
    </>
  );
};

export default DeepLearning;
